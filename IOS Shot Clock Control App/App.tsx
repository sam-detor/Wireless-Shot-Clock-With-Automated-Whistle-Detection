//generated by chat-gpt
import React, { useEffect, useState } from 'react';
import { StyleSheet, Text, View, Button, Alert,TouchableOpacity} from 'react-native';
import { Client, Message } from 'paho-mqtt';
import RNFS from 'react-native-fs';

const App = () => {
  const [client, setClient] = useState<Client | null>(null);

  // MQTT Broker configuration
  const brokerUrl = 'xxx'; // Replace with your MQTT broker URL (note the 'wss' for TLS)
  const topic = 'topic'; // The topic to publish to

  // Paths to the TLS certificate files
  //const caCertPath = RNFS.DocumentDirectoryPath + '/isrgrootx1.pem'; // CA Certificate
  //const clientCertPath = RNFS.DocumentDirectoryPath + '/client.crt'; // Client Certificate
  //const clientKeyPath = RNFS.DocumentDirectoryPath + '/client.key'; // Client Private Key

  useEffect(() => {
    // Create a new Paho MQTT Client
    const mqttClient = new Client(brokerUrl, `clientId_${Math.random()}`);

    // Set TLS options
    const options = {
      useSSL: true,
      userName: "xxx",
      password: "xxx",
      onSuccess: onConnect,
      onFailure: (error: any) => {
        console.error('Connection failed:', error);
        Alert.alert('Connection Error', error.errorMessage);
      },
      // Note: Paho MQTT currently does not directly support setting certificates,
      // You would handle the certs on the server-side or use a secure broker.
    };

    // Connect to the MQTT broker
    mqttClient.connect(options);
    setClient(mqttClient);

    /*// Create a Web Worker
    const worker = new Worker(`${__dirname}/python_worker.js`);

    // Listen for messages from the worker
    worker.onmessage = (event) => {
      if (event.data.type === "error") {
        console.error("Error in worker:", event.data.message);
      }
    };

    worker.postMessage({ type: "start" });*/

    // Clean up on unmount
    return () => {
      mqttClient.disconnect();
      //worker.terminate();
    };
  }, []);

  const onConnect = () => {
    console.log('Connected to MQTT Broker');
    Alert.alert('Connected', 'You are now connected to the MQTT broker');
  };

  // Function to handle button press and publish a message
  const Stop = () => {
    if (client) {
      const message = new Message('2');
      message.destinationName = "/game/";

      client.send(message);
      //console.log('Message published:', message.payloadString);
      //Alert.alert('Message Published', message.payloadString);
    } else {
      Alert.alert('MQTT Client Not Connected', 'Please wait for the connection to establish.');
    }
  };

  const Start = () => {
    if (client) {
      const message = new Message('1');
      message.destinationName = "/game/";

      client.send(message);
      //console.log('Message published:', message.payloadString);
      //Alert.alert('Message Published', message.payloadString);
    } else {
      Alert.alert('MQTT Client Not Connected', 'Please wait for the connection to establish.');
    }
  };

  const Reset = () => {
    if (client) {
      const message = new Message('3');
      message.destinationName = "/game/";

      client.send(message);
      //console.log('Message published:', message.payloadString);
      //Alert.alert('Message Published', message.payloadString);
    } else {
      Alert.alert('MQTT Client Not Connected', 'Please wait for the connection to establish.');
    }
  };

  return (
    /*<View style={styles.container}>
      <Text style={styles.title}>Press the buttons to control the shot clock:</Text>
      <Button title="Stop" onPress={Stop} />
      <Button title="Start" onPress={Start} />
      <Button title="Reset" onPress={Reset} />
    </View>*/
    <View style={styles.container}>
    <Text style={styles.title}>Press the buttons to control the shot clock:</Text>

    <TouchableOpacity style={styles.button} onPressIn={Stop}>
      <Text style={styles.buttonText}>Stop</Text>
    </TouchableOpacity>

    <TouchableOpacity style={styles.button} onPressIn={Start}>
      <Text style={styles.buttonText}>Start</Text>
    </TouchableOpacity>

    <TouchableOpacity style={styles.button} onPressIn={Reset}>
      <Text style={styles.buttonText}>Reset</Text>
    </TouchableOpacity>
  </View>
  );
};

// Styling for the app (chat-gpt)
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#FFFFFF', // Clean white background
    paddingHorizontal: 20,      // Adds padding to the sides
  },
  title: {
    fontSize: 24,                // Slightly larger for emphasis
    fontWeight: '600',           // Makes the title bolder
    color: '#333333',            // Darker, professional-looking color
    marginBottom: 30,            // Extra space below the title
    textAlign: 'center',         // Centered title text
  },
  subtitle: {
    fontSize: 16,
    fontWeight: '400',
    color: '#666666',            // Subtle gray color for subtitles or descriptions
    marginBottom: 10,
  },
  button: {
    backgroundColor: '#007AFF',  // Professional blue, similar to iOS primary color
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,             // Rounded corners for a modern look
    alignItems: 'center',
    marginTop: 20,
  },
  buttonText: {
    fontSize: 16,
    fontWeight: '500',
    color: '#FFFFFF',            // White text for contrast
  },
});

export default App;
